openapi: 3.0.0
info:
  title: Redis Caching CRUD Tasks API
  description: A Django API for task management with Redis caching
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://localhost:8000
    description: Local development server
tags:
  - name: tasks
    description: Task management operations
  - name: data
    description: Frequently accessed data operations

paths:
  /tasks/:
    get:
      summary: Get all tasks
      description: Retrieves a list of all tasks from the database or cache
      tags:
        - tasks
      responses:
        '200':
          description: Successful retrieval of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
  
  /tasks/create/:
    post:
      summary: Create a new task
      description: Creates a new task in the database and updates the cache
      tags:
        - tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '200':
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Task created
                  task_id:
                    type: integer
                    example: 1
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /tasks/update/{taskId}/:
    put:
      summary: Update an existing task
      description: Updates a task in the database and refreshes the cache
      tags:
        - tasks
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID of the task to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Task updated
                  task_id:
                    type: integer
                    example: 1
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /tasks/delete/{taskId}/:
    delete:
      summary: Delete a task
      description: Deletes a task from the database and removes it from cache
      tags:
        - tasks
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID of the task to delete
          schema:
            type: integer
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Task deleted
                  task_id:
                    type: integer
                    example: 1
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /frequently-accessed-data/:
    get:
      summary: Get frequently accessed data
      description: Retrieves frequently accessed data with memoization caching
      tags:
        - data
      responses:
        '200':
          description: Successful retrieval of data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: Frequently accessed data
                  stats:
                    type: object
                    properties:
                      total_tasks:
                        type: integer
                        example: 10
                      completed_tasks:
                        type: integer
                        example: 5

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Complete the project
        description:
          type: string
          example: Finish the Redis caching implementation
        completed:
          type: boolean
          example: false
    
    TaskCreate:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          example: New task
        description:
          type: string
          example: Description of the new task
        completed:
          type: boolean
          example: false
    
    TaskUpdate:
      type: object
      properties:
        title:
          type: string
          example: Updated task
        description:
          type: string
          example: Updated description
        completed:
          type: boolean
          example: true
    
    Error:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: An error occurred